# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _msh2d
else:
    import _msh2d

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def Msh2DBilinear(bry, m, n, elem_type, diagtype, nno, nel, pt, conn):
    return _msh2d.Msh2DBilinear(bry, m, n, elem_type, diagtype, nno, nel, pt, conn)

def Msh2DTryBilinear(bry, np, elem_type, diagtype, nno, nel, pt, conn):
    return _msh2d.Msh2DTryBilinear(bry, np, elem_type, diagtype, nno, nel, pt, conn)

def Msh2DCollBilinear(bry, m, n, elem_type, diagtype, nno, nel, pt, conn):
    return _msh2d.Msh2DCollBilinear(bry, m, n, elem_type, diagtype, nno, nel, pt, conn)

def Msh2DLoft(bry, m, n, dir, weight, elem_type, diagtype, nno, nel, pt, conn):
    return _msh2d.Msh2DLoft(bry, m, n, dir, weight, elem_type, diagtype, nno, nel, pt, conn)

def Msh2DCollLoft(bry, m, n, weight, elem_type, diagtype, nno, nel, pt, conn):
    return _msh2d.Msh2DCollLoft(bry, m, n, weight, elem_type, diagtype, nno, nel, pt, conn)

def Msh2DTrilinear(bry, m, elem_type, nno, nel, pt, conn):
    return _msh2d.Msh2DTrilinear(bry, m, elem_type, nno, nel, pt, conn)

def Msh2DTryTrilinear(bry, np, elem_type, nno, nel, pt, conn):
    return _msh2d.Msh2DTryTrilinear(bry, np, elem_type, nno, nel, pt, conn)

def Msh2DFreeNodes(points):
    return _msh2d.Msh2DFreeNodes(points)

def Msh2DFreeConn(Conn):
    return _msh2d.Msh2DFreeConn(Conn)

def Msh2DBoundContraction(n_loops, loop_segs, bdry_pts, gen_intpts, n_add_pts, qt_flag, type_mesh, add_coords, n_node, coords, n_elem, conn):
    return _msh2d.Msh2DBoundContraction(n_loops, loop_segs, bdry_pts, gen_intpts, n_add_pts, qt_flag, type_mesh, add_coords, n_node, coords, n_elem, conn)

def Msh2DQuadBound(n_loops, loop_segs, bdry_pts, type_mesh, ref_quad, n_node, coords, n_elem, conn):
    return _msh2d.Msh2DQuadBound(n_loops, loop_segs, bdry_pts, type_mesh, ref_quad, n_node, coords, n_elem, conn)

def Msh2DShape(n_loops, loop_segs, bdry_pts, type_mesh, n_node, coords, n_elem, conn):
    return _msh2d.Msh2DShape(n_loops, loop_segs, bdry_pts, type_mesh, n_node, coords, n_elem, conn)

def Msh2DEdge(n_pts, bdry_pts, bound_edge, inter_edge, edges, type_mesh, n_node, coords, n_elem, Conn):
    return _msh2d.Msh2DEdge(n_pts, bdry_pts, bound_edge, inter_edge, edges, type_mesh, n_node, coords, n_elem, Conn)

def Msh2DEdgeParams(_n, _param):
    return _msh2d.Msh2DEdgeParams(_n, _param)

def Msh2DQuadSeam(n_loops, loop_segs, bdry_pts, type_mesh, n_node, coords, n_elem, conn):
    return _msh2d.Msh2DQuadSeam(n_loops, loop_segs, bdry_pts, type_mesh, n_node, coords, n_elem, conn)

def Msh2DQuadSeamEdge(n_pts, bdry_pts, bound_edge, edges, n_node, coords, n_elem, Conn):
    return _msh2d.Msh2DQuadSeamEdge(n_pts, bdry_pts, bound_edge, edges, n_node, coords, n_elem, Conn)

def Msh2DTemplate(n_sides, subdvision, dim, type, smooth, bdry_pts, n_node, coords, n_elem, Conn):
    return _msh2d.Msh2DTemplate(n_sides, subdvision, dim, type, smooth, bdry_pts, n_node, coords, n_elem, Conn)

def Msh2DTemplateNumElements(n_sides, subdvision):
    return _msh2d.Msh2DTemplateNumElements(n_sides, subdvision)

def Msh2DTemplateSetParam(position, value):
    return _msh2d.Msh2DTemplateSetParam(position, value)


